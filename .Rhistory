#Load Data
library(readr)
loans50k <- read_csv("loans50k.csv")
View(loans50k)
#Test where the NAs are
which(is.na(loans50k), arr.ind=TRUE)
#Found a bunch in "employment". Inspect further and possibly eliminate/transform.
#Test where the NAs are
which(is.na(loans50k), arr.ind=TRUE)
#Test where the NAs are
which(is.na(df), arr.ind=TRUE)
#Test where the NAs are
which(is.na(df), arr.ind=TRUE)
which(is.na(df), arr.ind=TRUE)
#Test where the NAs are
which(is.na(loans50k), arr.ind=TRUE)
#Make new variable: Set "Good" and "Bad" Loans, all else "blank" to be removed later
df <-
loans50k %>%
mutate(payment_status = case_when(
status == "Fully Paid" ~ "Good",
status == "Charged Off" ~ "Bad",
TRUE ~ ""
))
library(tidyr)
library(tidyr)
install.packages("tidyr")
install.packages("dplyr")
library(tidyr)
library(dplyr)
#Make new variable: Set "Good" and "Bad" Loans, all else "blank" to be removed later
df <-
loans50k %>%
mutate(payment_status = case_when(
status == "Fully Paid" ~ "Good",
status == "Charged Off" ~ "Bad",
TRUE ~ ""
))
#change the empty string cells to NAs
df[df==""]<-NA
which(is.na(df), arr.ind=TRUE)
df$employment<- NULL
df$Employed<-NULL
#Test where all NAs are to
which(is.na(df), arr.ind=TRUE)
#Found a bunch in "employment". Inspect further and possibly eliminate/transform.
df$employment<- NULL
#Test where the NAs are again:
which(is.na(df), arr.ind=TRUE)
#last ones besides payment_status are bcOpen and bcRatio, of which there are roughtly 500 missing entries, or 1% of the
#original dataset. Eliminating these wont be an issue
sum(is.na(df$bcOpen))
options(max.print=1000000)
which(is.na(df), arr.ind=TRUE)
View(df)
options(max.print=10000)
df<-df %>% drop_na(payment_status)
View(df)
which(is.na(df), arr.ind=TRUE)
#Finally omit all the rows containing NA values.
df1<-na.omit(df)
df1$verified<-revalue(df1$verified, c("Source Verified"="Verified"))
#consolidate "verified" variable into two levels instead of three
library(plyr)
df1$verified<-revalue(df1$verified, c("Source Verified"="Verified"))
unique(df1$verified)
#make subset of numerical data check covariance matrix on numeric factors.
dfNum<-select_if(df1, is.numeric)
cor(dfNum)
df_New = as.data.frame(subset(df1, select = -c(totalPaid, payment,revolRatio, avgBal, totalLim,state,status,loanID)))
View(df_New)
table(df_New)
solution<-as.data.frame(table(unlist(df_New)))
View(solution)
sapply(colnames(df_New), function(x) class(diamonds[[x]]))
sapply(colnames(df_New), function(x) class(df_New[[x]]))
tapply(colnames(df_New), function(x) class(df_New[[x]]))
lapply(colnames(df_New), function(x) class(df_New[[x]]))
sapply(colnames(df_New), function(x) class(df_New[[x]]))
sapply(colnames(df_New), class(df_New[[x]]))
function(x)
sapply(colnames(df_New), function(x) class(df_New[[x]]))
dfChar<-select_if(df2,is.character)
dfChar<-select_if(df1,is.character)
unique(dfChar)
tapply(dfChar,unique)
sapply(dfChar,unique)
lentgh(sapply(dfChar,unique))
length(sapply(dfChar,unique))
tapply((sapply(dfChar,unique)),length)
sapply((sapply(dfChar,unique)),length)
sapply((sapply(df_New,unique)),length)
#Eliminating: totalPaid, employment, payment,revolRatio, avgBal, totalLim,state,status,loanID
df_New = as.data.frame(subset(df1, select = -c(totalPaid, employment, payment,revolRatio, avgBal, totalLim,state,status,loanID)))
#Eliminating: totalPaid, employment (already done), payment,revolRatio, avgBal, totalLim,state,status,loanID
df_New = as.data.frame(subset(df1, select = -c(totalPaid, payment,revolRatio, avgBal, totalLim,state,status,loanID)))
install.packages("aod")
install.packages("ggplot2")
View(loans50k)
sapply((sapply(loans50k,unique)),length)
mod <- glm(payment_status ~ ., data = df_New)
mod <- lm(payment_status ~ ., data = df_New)
mylogit <- glm(payment_status ~ ., data = df_New, family = "binomial")
mylogit <- glm(as.factor(payment_status) ~ ., data = df_New, family = "binomial")
View(mylogit)
mylogit
ggplot(gather(df_New, cols, value), aes(x = value)) +
geom_histogram(binwidth = 20) + facet_grid(.~cols)
#Load Data
library(readr)
loans50k <- read_csv("loans50k.csv")
View(loans50k)
library(tidyr)
library(dplyr)
#Make new variable: Set "Good" and "Bad" Loans, all else "blank" to be removed later
df <-
loans50k %>%
mutate(payment_status = case_when(
status == "Fully Paid" ~ "Good",
status == "Charged Off" ~ "Bad",
TRUE ~ ""
))
#change the empty string cells to NAs
df[df==""]<-NA
#Test where all NAs are to
which(is.na(df), arr.ind=TRUE)
#Found a bunch in "employment". Going to eliminate on account of too many levels/NA values.
df$employment<- NULL
#Probably best to get rid of the null values we aren't interested in payment_status:
df<-df %>% drop_na(payment_status)
#Test where the NAs are again:
which(is.na(df), arr.ind=TRUE)
#Row 34806 is missing all values, eliminate and test again:
df <- df[-c(34806),]
which(is.na(df), arr.ind=TRUE)
#last NA values are in bcOpen and bcRatio, of which there are roughtly 400 incomplete entries,
#or roughly 1% of the dataset. Eliminating these wont be a huge issue.
#Finally omit all the rows containing NA values. (This will not eliminate the NA values in "length" as they are strings)
df1<-na.omit(df)
#consolidate "verified" variable into two levels instead of three
library(plyr)
df1$verified<-revalue(df1$verified, c("Source Verified"="Verified"))
unique(df1$verified)
library("ggplot")
install.packages("ggplot2")
library("ggplot2")
ggplot(gather(df_New, cols, value), aes(x = value)) +
geom_histogram(binwidth = 20) + facet_grid(.~cols)
sapply(df_New, hist)
